# yaml-language-server: $schema=.schema.json

members:
  admin:
    - galargh
    - laurentsenta
repositories:
  new-repo: {}
  github-action-releaser:
    allow_auto_merge: false
    allow_merge_commit: true
    allow_rebase_merge: true
    allow_squash_merge: true
    archived: false
    auto_init: false
    default_branch: main
    delete_branch_on_merge: false
    description: Release steps for github actions.
    has_downloads: true
    has_issues: true
    has_projects: true
    has_wiki: true
    is_template: false
    teams:
      maintain:
        - ipdx
    visibility: public
    vulnerability_alerts: false
  github-mgmt:
    allow_auto_merge: false
    allow_merge_commit: true
    allow_rebase_merge: true
    allow_squash_merge: true
    archived: false
    auto_init: false
    branch_protection:
      master:
        allows_deletions: false
        allows_force_pushes: false
        enforce_admins: false
        require_conversation_resolution: false
        require_signed_commits: false
        required_linear_history: false
        required_pull_request_reviews:
          dismiss_stale_reviews: false
          dismissal_restrictions: []
          pull_request_bypassers: []
          require_code_owner_reviews: false
          required_approving_review_count: 1
          restrict_dismissals: false
        required_status_checks:
          contexts:
            - Plan
          strict: true
    collaborators:
      admin:
        - galargh
    default_branch: master
    delete_branch_on_merge: true
    files:
      CODEOWNERS:
        content: >
          *       @galargh
        overwrite_on_create: false
      README.md:
        content: >
          # GitHub Management via Terraform: pl-strflt


          This repository is responsible for managing GitHub configuration of `pl-strflt` organisation as code with Terraform. It was created from [github-mgmt-template](https://github.com/protocol/github-mgmt-template) and it will receive updates from that repository.


          **IMPORTANT**: Having write access to GitHub Management repository can be as powerful as having admin access to the organizations managed by that repository.


          *NOTE*: Because we don't have merge queue functionality enabled for the repository yet, after a merge, wait for the `Apply` and `Update` workflows to complete before merging any other PRs.


          To learn more, check out:

          - [What is GitHub Management and how does it work?](docs/ABOUT.md)

          - [How to set up GitHub Management?](docs/SETUP.md)

          - [How to work with GitHub Management?](docs/HOWTOS.md)
        overwrite_on_create: false
    has_downloads: true
    has_issues: true
    has_projects: false
    has_wiki: false
    is_template: false
    teams:
      maintain:
        - w3dt-stewards
      triage:
        - ipdx
    template:
      owner: protocol
      repository: github-mgmt-template
    visibility: public
    vulnerability_alerts: false
  ipdx:
    allow_auto_merge: false
    allow_merge_commit: true
    allow_rebase_merge: true
    allow_squash_merge: true
    archived: false
    auto_init: false
    default_branch: main
    delete_branch_on_merge: false
    has_downloads: true
    has_issues: true
    has_projects: true
    has_wiki: true
    is_template: false
    teams:
      admin:
        - ipdx
    visibility: public
    vulnerability_alerts: false
  projects-migration:
    allow_auto_merge: false
    allow_merge_commit: true
    allow_rebase_merge: true
    allow_squash_merge: true
    archived: false
    auto_init: false
    default_branch: main
    delete_branch_on_merge: false
    has_downloads: true
    has_issues: true
    has_projects: true
    has_wiki: true
    is_template: false
    pages:
      cname: ""
      source:
        branch: main
        path: /docs
    teams:
      maintain:
        - ipdx
    topics:
      - github
      - graphql
    visibility: public
    vulnerability_alerts: false
  projects-status-history:
    allow_auto_merge: false
    allow_merge_commit: true
    allow_rebase_merge: true
    allow_squash_merge: true
    archived: false
    auto_init: false
    default_branch: main
    delete_branch_on_merge: false
    has_downloads: true
    has_issues: true
    has_projects: true
    has_wiki: true
    is_template: false
    teams:
      maintain:
        - ipdx
    visibility: public
    vulnerability_alerts: false
  rust-sccache-action:
    allow_auto_merge: false
    allow_merge_commit: true
    allow_rebase_merge: true
    allow_squash_merge: true
    archived: false
    auto_init: false
    default_branch: main
    delete_branch_on_merge: false
    has_downloads: true
    has_issues: true
    has_projects: true
    has_wiki: true
    is_template: false
    teams:
      maintain:
        - ipdx
    visibility: public
    vulnerability_alerts: true
  tf-aws-gh-runner:
    allow_auto_merge: false
    allow_merge_commit: true
    allow_rebase_merge: true
    allow_squash_merge: true
    archived: false
    auto_init: false
    default_branch: main
    delete_branch_on_merge: false
    has_downloads: true
    has_issues: true
    has_projects: true
    has_wiki: true
    is_template: false
    teams:
      maintain:
        - ipdx
    visibility: public
    vulnerability_alerts: false
teams:
  ipdx:
    members:
      maintainer:
        - galargh
        - laurentsenta
    privacy: closed
  w3dt-stewards:
    create_default_maintainer: false
    members:
      maintainer:
        - galargh
        - laurentsenta
    privacy: secret
