name: Lint

on:
  pull_request_target:
  workflow_run:
    workflows:
      - "Apply"
    types:
      - completed
  workflow_dispatch:
    inputs:
      workspaces:
        description: Space separated list of workspaces to run actions in (leave blank to run actions in all)
        required: false

defaults:
  run:
    shell: bash

concurrency:
  group: lint-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    if: github.event_name == 'workflow_dispatch' ||
        github.event_name == 'pull_request_target' ||
        (github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success')
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      workspaces: ${{ steps.workspaces.outputs.this }}
      skip-lint: ${{ steps.skip-lint.outputs.this }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: Discover workspaces
        id: workspaces
        run: |
          if [[ -z '${{ github.event.inputs.workspaces }}' ]]; then
            workspaces="$(ls github | jq --raw-input '[.[0:-4]]' | jq -sc add)"
          else
            workspaces="$(echo '${{ github.event.inputs.workspaces }}' | jq --raw-input 'split(" ")')"
          fi
          echo "::set-output name=this::$workspaces"
      - name: Check last commit
        id: skip-lint
        run: |
          if [ "$(git log --oneline -n1)" == "*[skip lint]" ]; then
            echo "::set-output name=this::true"
          else
            echo "::set-output name=this::false"
          fi
  lint:
    needs: [prepare]
    if: needs.prepare.outputs.skip-lint == 'false'
    permissions:
      contents: read
    name: Lint
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: 1
      TF_INPUT: 0
      AWS_ACCESS_KEY_ID: ${{ secrets.RO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RO_AWS_SECRET_ACCESS_KEY }}
      GITHUB_APP_ID: ${{ secrets.RO_GITHUB_APP_ID }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets[format('RO_GITHUB_APP_INSTALLATION_ID_{0}', matrix.workspace)] || secrets.RO_GITHUB_APP_INSTALLATION_ID }}
      GITHUB_APP_PEM_FILE: ${{ secrets.RO_GITHUB_APP_PEM_FILE }}
      TF_VAR_write_delay_ms: 300
    outputs:
      github-modified: ${{ steps.github-modified.outputs.this }}
    steps:
      - name: Generate app token
        id: token
        uses: tibdex/github-app-token@7ce9ffdcdeb2ba82b01b51d6584a6a85872336d4 # v1.5.1
        with:
          app_id: ${{ secrets.RW_GITHUB_APP_ID }}
          installation_id: ${{ secrets[format('RW_GITHUB_APP_INSTALLATION_ID_{0}', github.repository_owner)] || secrets.RW_GITHUB_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.RW_GITHUB_APP_PEM_FILE }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          token: ${{ steps.token.outputs.token }}
          path: head
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: base
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4
          terraform_wrapper: false
      - name: Initialize terraform
        run: terraform init
        working-directory: head/terraform
      - name: Initialize scripts
        run: |
          npm install
          npm run build
        working-directory: base/scripts
      - name: Lint
        run: |
          while read workspace; do
            terraform workspace select "$workspace"
            TF_WORKSPACE="$workspace" node ../../base/scripts/lib/actions/*.js
          done <<< "$(jq -r '.[]' <<< '${{ needs.prepare.outputs.workspaces || '[]' }}')"
        working-directory: head/scripts
      - name: Check if configs were modified
        id: github-modified
        run: |
          if git diff-index --quiet HEAD -- github; then
            echo "::set-output name=this::false"
          else
            echo "::set-output name=this::true"
          fi
        working-directory: head
      - uses: ./.github/actions/git-config-user
        if: steps.github-modified.outputs.this == 'true'
      - if: steps.github-modified.outputs.this == 'true'
        run: |
          git add --all -- github
          git commit -m "chore: lint [skip lint]"
        working-directory: head
      - if: steps.github-modified.outputs.this == 'true' && github.event_name == 'pull_request_target'
        run: |
          git checkout -B ${{ github.event.pull_request.head.ref }}
          git push origin ${{ github.event.pull_request.head.ref }}
        working-directory: head
      - if: steps.github-modified.outputs.this == 'true' && github.event_name != 'pull_request_target'
        uses: ./.github/actions/git-push
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        with:
          suffix: lint
          working-directory: head
